[
  {
    "name": "User provided link inside webview",
    "requiredState": 3,
    "dataFlow": true,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to load user provided URLs",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "getIntent"
      },
      {
        "type": "MethodArgumentDetector",
        "methodName": "getQueryParameter",
        "argumentPattern": "url",
        "exactMatch": true

      },
      {
        "type": "MethodCallDetector",
        "methodName": "loadUrl"
      }
    ]
  },
  {
    "name": "Security Risk with JavaScript Interface",
    "requiredState": 2,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "JavaScript interface can be used to access sensitive data",
    "detectors": [
      {
        "type": "ObjectCreationDetector",
        "methodName": "JavaScriptInterface"
      },
      {
        "type": "MethodCallDetector",
        "methodName": "addJavascriptInterface"
      }
    ]
  },
  {
    "name": "SQL Injection",
    "requiredState": 2,
    "dataFlow": true,
    "dangerLevel": "Danger",
    "description": "SQL Injection is a common vulnerability in web applications. It allows an attacker to gain access to the database underlying the application and to the data stored in it. In some cases, an attacker can modify or delete this data, causing persistent changes to the applications content or behavior.",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "getParameter"
      },
      {
        "type": "MethodCallDetector",
        "methodName": "executeQuery"
      }
    ]
  },
  {
    "name": "Command Injection",
    "requiredState": 2,
    "dataFlow": true,
    "dangerLevel": "Danger",
    "description": "Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell command",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "getParameter"
      },
      {
        "type": "MethodCallDetector",
        "methodName": "exec"
      }
    ]
  },
  {
    "name": "Insecure Network Communication",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to use HTTP protocol for network communication, because it is not encrypted and can be intercepted by an attacker",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "setEndpoint",
        "argumentPattern": "http://",
        "exactMatch": false
      }
    ]
  },
  {
    "name": "Clipboard Data Exposure",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Low",
    "description": "It is a bad practice to use ClipboardManager to store sensitive data, because it can be accessed by other applications",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "setPrimaryClip"
      }
    ]
  },
  {
    "name": "Insecure Random Number Generation",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to use Random class to generate random numbers, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "ObjectCreationDetector",
        "methodName": "java.util.Random"
      }
    ]
  },
  {
    "name": "Insecure File Storage",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to store sensitive data in external storage, because it can be accessed by other applications",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "getExternalStorageDirectory"
      }
    ]
  },
  {
    "name": "Weak Cryptographic Practices MD5",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use MD5 algorithm for cryptographic purposes, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "getInstance",
        "argumentPattern": "MD5",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Weak Cryptographic Practices SHA1",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use SHA1 algorithm for cryptographic purposes, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "getInstance",
        "argumentPattern": "SHA1",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Weak Cryptographic Practices DES",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use DES algorithm for cryptographic purposes, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "getInstance",
        "argumentPattern": "DES",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Implicit Intents without Category",
    "requiredState": 2,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to use implicit intents without specifying category, because it can be intercepted by an attacker",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "setAction"
      },
      {
        "type": "MethodArgumentDetector",
        "methodName": "addCategory",
        "argumentPattern": "null",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Unrestricted Access to potentially Dangerous APIs",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use potentially dangerous APIs without checking permissions, because it can be used by an attacker to gain access to sensitive data",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "setAllowUniversalAccessFromFileURLs"
      }
    ]
  },
  {
    "name": "Unsafe file creation from user provided data",
    "requiredState": 2,
    "dataFlow": true,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to create files from user provided data, because it can be used by an attacker to gain access to sensitive data",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "getIntent"
      },
      {
        "type": "MethodCallDetector",
        "methodName": "File"
      }
    ]
  },
  {
    "name": "Insecure WebView file access settings",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to enable file access in WebView, because it can be used by an attacker to gain access to sensitive data",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "setAllowFileAccess"
      }
    ]
  },
  {
    "name": "Outdated TLS Protocol Version",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to use outdated TLS protocol version, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "getInstance",
        "argumentPattern": "TLSv1",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Outdated SSL Protocol Version",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Medium",
    "description": "It is a bad practice to use outdated SSL protocol version, because it is not cryptographically secure",
    "detectors": [
      {
        "type": "MethodArgumentDetector",
        "methodName": "getInstance",
        "argumentPattern": "SSLv3",
        "exactMatch": true
      }
    ]
  },
  {
    "name": "Direct Use of SQL Queries rawQuery",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use direct SQL queries, because it can be used to perform SQL injection attacks",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "rawQuery"
      }
    ]
  },
  {
    "name": "Direct Use of SQL Queries execSQL",
    "requiredState": 1,
    "dataFlow": false,
    "dangerLevel": "Danger",
    "description": "It is a bad practice to use direct SQL queries, because it can be used to perform SQL injection attacks",
    "detectors": [
      {
        "type": "MethodCallDetector",
        "methodName": "execSQL"
      }
    ]
  }
]
